     1                                  ;Andy Cao - 888500782 - May 20, 2021
     2                                  ;****************************************************************************************************************************
     3                                  ;Program name: harmonic.asm  
     4                                  ;This program is use to make an array and sum by creating the multiple assembly file *
     5                                  ;Programming Language:x86Assembly
     6                                  ; Program Description: This program asks a user to input floating point into array and 
     7                                  ; return the sum of the array.
     8                                  ;********************************************************************************************
     9                                  ; Copyright (C) 2020                                                     *
    10                                  ; This program is free software: you can redistribute it and/or modify it under the terms   *
    11                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. *
    12                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    13                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
    14                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    15                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.  
    16                                  ;                          
    17                                  ;****************************************************************************************************************************
    18                                  
    19                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    20                                  ;
    21                                  ;Author information
    22                                  ;  Author name: Andy Cao
    23                                  ;  Author email: dongyicao123@csu.fullerton.edu
    24                                  ;
    25                                  ;Program information
    26                                  ;  Program name: harmonic
    27                                  ;  Programming languages: One modules in C, one module in C++ and three module in X86
    28                                  ;  Date program began: 2021-May-20
    29                                  ;  Date of last update: 2021-May-20
    30                                  ;  Date of reorganization of comments: 2020-May-20
    31                                  ;  Status: Finished.  The program was tested extensively with no errors in Xubuntu19.04.
    32                                  ;
    33                                  ;This file
    34                                  ;   File name: fill.asm
    35                                  ;   Language: X86 with Intel syntax.
    36                                  ;   Max page width: 126 columns
    37                                  ;===== Begin code area =======================================================================================================
    38                                  extern printf 
    39                                  extern scanf
    40                                  extern atof
    41                                  extern isfloat
    42                                  global input_array
    43                                  segment .data
    44 00000000 506C6561736520656E-         intro_text db "Please enter floating point number separated by ws", 10
    44 00000009 74657220666C6F6174-
    44 00000012 696E6720706F696E74-
    44 0000001B 206E756D6265722073-
    44 00000024 657061726174656420-
    44 0000002D 62792077730A       
    45 00000033 5768656E2066696E69-                    db "When finished press enter followed by Crtl+D",10, 0
    45 0000003C 736865642070726573-
    45 00000045 7320656E7465722066-
    45 0000004E 6F6C6C6F7765642062-
    45 00000057 79204372746C2B440A-
    45 00000060 00                 
    46 00000061 256C6600                    floatformat db "%lf", 0
    47 00000065 257300                      stringformat db "%s", 0
    48                                  segment .bss
    49                                  
    50                                  segment .text
    51                                  
    52                                  input_array:
    53                                  ;Insurance for any caller of this assembly module
    54 00000000 55                            push rbp
    55 00000001 4889E5                        mov rbp, rsp
    56 00000004 57                            push rdi
    57 00000005 56                            push rsi
    58 00000006 52                            push rdx
    59 00000007 51                            push rcx
    60 00000008 4150                          push r8
    61 0000000A 4151                          push r9
    62 0000000C 4152                          push r10
    63 0000000E 4153                          push r11
    64 00000010 4154                          push r12
    65 00000012 4155                          push r13
    66 00000014 4156                          push r14
    67 00000016 4157                          push r15
    68 00000018 53                            push rbx
    69 00000019 9C                            pushf
    70                                  ;-------------------------------------------------------------------------------
    71                                      
    72 0000001A 6A00                        push qword 0	;pushes
    73                                  ;-------------------------------------------------------------------------------
    74 0000001C 4989FE                      mov qword r14, rdi                  ;address of array save to r14
    75 0000001F 4989F5                      mov qword r13, rsi                  ;num of element of array 
    76 00000022 41BC00000000                mov qword r12, 0                    ;count 
    77                                  ;-------------------------------------------------------------------------------
    78                                          
    79 00000028 48B8-                       mov qword rax, stringformat         ; print out the introduction 
    79 0000002A [6500000000000000] 
    80 00000032 48BF-                       mov qword rdi, intro_text
    80 00000034 [0000000000000000] 
    81 0000003C B800000000                  mov qword rax,0
    82 00000041 E8(00000000)                call printf
    83                                  ;-------------------------------------------------------------------------------   
    84                                      begin_loop:
    85                                      
    86 00000046 48BF-                       mov qword rdi, stringformat          ;ask user for the input 
    86 00000048 [6500000000000000] 
    87 00000050 4889E6                      mov qword rsi, rsp
    88 00000053 B800000000                  mov rax, 0
    89 00000058 E8(00000000)                call scanf
    90                                  
    91 0000005D 4898                        cdqe                                ;ctrl + D to end the loop 
    92 0000005F 4883F8FF                    cmp rax, -1
    93 00000063 7437                        je end_loop
    94                                      
    95 00000065 B800000000                  mov qword rax, 0
    96 0000006A 4889E7                      mov qword rdi, rsp
    97 0000006D E8(00000000)                call isfloat
    98 00000072 4883F800                    cmp rax, 0
    99 00000076 7422                        je invalid_input
   100                                  
   101 00000078 B800000000                  mov qword rax, 0
   102 0000007D 4889E7                      mov qword rdi, rsp 
   103 00000080 E8(00000000)                call atof
   104                                  
   105 00000085 F2440F10E8                  movsd xmm13, xmm0                   ;insert as a floating point 
   106 0000008A F2470F112CE6                movsd [r14 + 8 * r12], xmm13        ;user input to array
   107 00000090 49FFC4                      inc r12                             ;increase by one 
   108                                  
   109 00000093 4D39EC                      cmp r12, r13                        ;compare element to capacity 100
   110 00000096 7404                        je end_loop
   111                                  
   112 00000098 EBAC                        jmp begin_loop                      ;loop again 
   113                                  ;-------------------------------------------------------------------------------  
   114                                      invalid_input:
   115 0000009A EBAA                        jmp begin_loop
   116                                  
   117                                      end_loop: 
   118                                      
   119 0000009C 58                          pop rax
   120 0000009D 4C89E0                      mov qword rax, r12                  ;copy size of array to control 
   121                                  ;-------------------------------------------------------------------------------
   122                                  ;Restore original values to integer registers
   123 000000A0 9D                            popf
   124 000000A1 5B                            pop rbx
   125 000000A2 415F                          pop r15
   126 000000A4 415E                          pop r14
   127 000000A6 415D                          pop r13
   128 000000A8 415C                          pop r12
   129 000000AA 415B                          pop r11
   130 000000AC 415A                          pop r10
   131 000000AE 4159                          pop r9
   132 000000B0 4158                          pop r8
   133 000000B2 59                            pop rcx
   134 000000B3 5A                            pop rdx
   135 000000B4 5E                            pop rsi
   136 000000B5 5F                            pop rdi
   137 000000B6 5D                            pop rbp
   138                                  
   139 000000B7 C3                            ret
