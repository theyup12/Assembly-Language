     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: create an interview example 
     3                                  ;This program is to create a mock interview and find the resistance of circuit  *
     4                                  ;Programming Language:x86Assembly
     5                                  ;********************************************************************************************
     6                                  ; Copyright (C) 2020 Bilal El-haghassan                                                     *
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms   *
     8                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. *
     9                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    10                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
    11                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    12                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.  
    13                                  ;                          
    14                                  ;****************************************************************************************************************************
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;
    18                                  ;Author information
    19                                  ;  Author name: Andy Cao
    20                                  ;  Author email: dongyicao123@csu.fullerton.edu
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: sum of array
    24                                  ;  Programming languages: One modules in C, one module in C++ and three module in X86
    25                                  ;  Date program began: 2021-Apr-25
    26                                  ;  Date of last update: 2021-Apr-30
    27                                  ;  Date of reorganization of comments: 2020-Mar-20
    28                                  ;  Files in this program: display.cpp, fill.asm, main.c, control.asm, sum.asm
    29                                  ;  Status: Finished.  The program was tested extensively with no errors in Xubuntu19.04.
    30                                  ;
    31                                  ;This file
    32                                  ;   File name: interview.asm
    33                                  ;   Language: X86 with Intel syntax.
    34                                  ;   Max page width: 145 columns
    35                                  ;   Assemble: nasm -f elf64 -l interview.lis -o interview.o interview.asm
    36                                  ;===== Begin code area =======================================================================================================
    37                                  extern printf 
    38                                  extern scanf
    39                                  
    40                                  global interview
    41                                  
    42                                  segment .data
    43 00000000 48656C6C6F2025732E-         intro_text db "Hello %s. I am Ms Fenster. The interview will begin now", 10,0
    43 00000009 204920616D204D7320-
    43 00000012 46656E737465722E20-
    43 0000001B 54686520696E746572-
    43 00000024 766965772077696C6C-
    43 0000002D 20626567696E206E6F-
    43 00000036 770A00             
    44 00000039 576F77212024256C66-         salary_display db "Wow! $%lf That's a lot of cash. Who do you think you are, Chris Sawyer(y or n)?", 0
    44 00000042 205468617427732061-
    44 0000004B 206C6F74206F662063-
    44 00000054 6173682E2057686F20-
    44 0000005D 646F20796F75207468-
    44 00000066 696E6B20796F752061-
    44 0000006F 72652C204368726973-
    44 00000078 205361777965722879-
    44 00000081 206F72206E293F00   
    45 00000089 257300                      input db "%s", 0 
    46 0000008C 0A506C656173652065-         first_resistance db 10,"Please enter the resistance of circuit #1 in ohms:", 0
    46 00000095 6E7465722074686520-
    46 0000009E 726573697374616E63-
    46 000000A7 65206F662063697263-
    46 000000B0 75697420233120696E-
    46 000000B9 206F686D733A00     
    47 000000C0 0A5768617420697320-         second_resistance db 10, "What is the resistance of circuit #2 in ohms:", 0
    47 000000C9 746865207265736973-
    47 000000D2 74616E6365206F6620-
    47 000000DB 636972637569742023-
    47 000000E4 3220696E206F686D73-
    47 000000ED 3A00               
    48 000000EF 0A54686520746F7461-         result db 10, "The total resistance is %lf Ohms.", 10, 0
    48 000000F8 6C2072657369737461-
    48 00000101 6E636520697320256C-
    48 0000010A 66204F686D732E0A00 
    49 00000113 256C6600                    float_format db "%lf", 0
    50 00000117 0A5468616E6B20796F-         end_display db 10,"Thank you. Please follow the exit signs to the front desk",10, 0
    50 00000120 752E20506C65617365-
    50 00000129 20666F6C6C6F772074-
    50 00000132 686520657869742073-
    50 0000013B 69676E7320746F2074-
    50 00000144 68652066726F6E7420-
    50 0000014D 6465736B0A00       
    51 00000153 5765726520796F7520-         major db "Were you a computer science major (y or n)?", 0
    51 0000015C 6120636F6D70757465-
    51 00000165 7220736369656E6365-
    51 0000016E 206D616A6F72202879-
    51 00000177 206F72206E293F00   
    52                                  
    53                                  segment .bss
    54                                  
    55                                  segment .text
    56                                  
    57                                  interview:
    58                                  ;Insurance for any caller of this assembly module
    59 00000000 55                            push rbp
    60 00000001 4889E5                        mov rbp, rsp
    61 00000004 57                            push rdi
    62 00000005 56                            push rsi
    63 00000006 52                            push rdx
    64 00000007 51                            push rcx
    65 00000008 4150                          push r8
    66 0000000A 4151                          push r9
    67 0000000C 4152                          push r10
    68 0000000E 4153                          push r11
    69 00000010 4154                          push r12
    70 00000012 4155                          push r13
    71 00000014 4156                          push r14
    72 00000016 4157                          push r15
    73 00000018 53                            push rbx
    74 00000019 9C                            pushf
    75                                  ;-------------------------------------------------------------------------------
    76                                      
    77 0000001A 6A00                        push qword 0	                    ;create even number of pushes 
    78 0000001C 4989FF                      mov r15, rdi                        ;push name into this file
    79 0000001F F2440F10F8                  movsd xmm15, xmm0                   ;push salary into this file
    80                                  ;-------------------------------------------------------------------------------
    81 00000024 6A00                        push qword 0
    82 00000026 B800000000                  mov rax, 0
    83 0000002B 48BF-                       mov rdi, intro_text
    83 0000002D [0000000000000000] 
    84 00000035 4C89FE                      mov rsi, r15
    85 00000038 E8(00000000)                call printf                                
    86 0000003D 58                          pop rax                             ;print the introduction with name given
    87                                  ;-------------------------------------------------------------------------------
    88 0000003E 6A00                        push qword 0
    89 00000040 B801000000                  mov rax, 1
    90 00000045 48BF-                       mov rdi, salary_display
    90 00000047 [3900000000000000] 
    91 0000004F F2410F10C7                  movsd xmm0, xmm15
    92 00000054 E8(00000000)                call printf                         ;print the salary and ask for yes or no
    93 00000059 58                          pop rax 
    94                                  ;-------------------------------------------------------------------------------
    95 0000005A 6A00                        push qword 0
    96 0000005C 48BF-                       mov rdi, input
    96 0000005E [8900000000000000] 
    97 00000066 4889E6                      mov rsi, rsp 
    98 00000069 E8(00000000)                call scanf 
    99 0000006E 58                          pop rax                             ;take the given choice 
   100                                  ;-------------------------------------------------------------------------------
   101 0000006F 41BE79000000                mov r14, 'y'                        ;character 'y' 
   102 00000075 4C39F0                      cmp rax, r14                        ;compare with the input
   103                                  
   104 00000078 48B80000000080842E-         mov rax, 0x412E848000000000         ;if yes, new salary is 1 million
   104 00000081 41                 
   105 00000082 664C0F6EF8                  movq xmm15, rax                     ;store it into xmm15
   106 00000087 0F8408010000                je exit                             ;jump to the end 
   107                                  ;-------------------------------------------------------------------------------  
   108 0000008D 6A00                        push qword 0
   109 0000008F B800000000                  mov rax, 0
   110 00000094 48BF-                       mov rdi, first_resistance
   110 00000096 [8C00000000000000] 
   111 0000009E E8(00000000)                call printf
   112 000000A3 58                          pop rax                             ;ask the user for resistance of circuit #1
   113                                  
   114 000000A4 6A00                        push qword 0
   115 000000A6 B800000000                  mov rax, 0 
   116 000000AB 48BF-                       mov rdi, float_format               ;floating point
   116 000000AD [1301000000000000] 
   117 000000B5 4889E6                      mov rsi, rsp
   118 000000B8 E8(00000000)                call scanf
   119 000000BD F2440F103424                movsd xmm14, [rsp]                  ;store it into xmm14 
   120 000000C3 58                          pop rax
   121                                  ;-------------------------------------------------------------------------------
   122 000000C4 6A00                        push qword 0
   123 000000C6 B800000000                  mov rax, 0
   124 000000CB 48BF-                       mov rdi, second_resistance          ;ask the user for the resistance of circuit #2
   124 000000CD [C000000000000000] 
   125 000000D5 E8(00000000)                call printf
   126 000000DA 58                          pop rax         
   127                                  
   128 000000DB 6A00                        push qword 0
   129 000000DD B800000000                  mov rax, 0 
   130 000000E2 48BF-                       mov rdi, float_format               ;second floating point
   130 000000E4 [1301000000000000] 
   131 000000EC 4889E6                      mov rsi, rsp
   132 000000EF E8(00000000)                call scanf
   133 000000F4 F2440F102C24                movsd xmm13, [rsp]                  ;store it into xmm13
   134 000000FA 58                          pop rax
   135                                  
   136                                  ;---------------------------Calculation----------------------------------------- 
   137 000000FB 41BD01000000                mov r13, 1
   138 00000101 F24D0F2AE5                  cvtsi2sd xmm12, r13                 ;convert to precision floating point
   139                                  
   140 00000106 F2450F5EE6                  divsd xmm12, xmm14                  ;divide 1 / circuit #1
   141 0000010B F24D0F2ADD                  cvtsi2sd xmm11, r13                 ;convert again and store into xmm11
   142 00000110 F2450F5EDD                  divsd xmm11, xmm13                  ;divide 1 / circuit #2
   143 00000115 F2450F58E3                  addsd xmm12, xmm11                  ; add xmm12 and xmm11
   144 0000011A F24D0F2AD5                  cvtsi2sd xmm10, r13                 ;convert again and store into xmm10
   145 0000011F F2450F5ED4                  divsd xmm10, xmm12                  ;divide with 1 / (1/circuit #1) + (1/circuit #2)
   146                                      
   147                                  ;------------------------------------------------------------------------------- 
   148 00000124 6A00                        push qword 0
   149 00000126 B801000000                  mov rax, 1
   150 0000012B 48BF-                       mov rdi, result
   150 0000012D [EF00000000000000] 
   151 00000135 F2410F10C2                  movsd xmm0, xmm10
   152 0000013A E8(00000000)                call printf                         ;print out the result of calcuation
   153 0000013F 58                          pop rax 
   154                                  ;------------------------------------------------------------------------------- 
   155 00000140 6A00                        push qword 0
   156 00000142 B801000000                  mov rax, 1
   157 00000147 48BF-                       mov rdi, major
   157 00000149 [5301000000000000] 
   158 00000151 E8(00000000)                call printf                                ;ask user for cs major 
   159 00000156 58                          pop rax 
   160                                  
   161 00000157 6A00                        push qword 0    
   162 00000159 48BF-                       mov rdi, input                             ;store input 
   162 0000015B [8900000000000000] 
   163 00000163 4889E6                      mov rsi, rsp 
   164 00000166 E8(00000000)                call scanf 
   165 0000016B 58                          pop rax  
   166                                  
   167 0000016C 41BE79000000                mov r14, 'y'                               ;determine whether cs major or not
   168 00000172 4C39F0                      cmp rax, r14
   169 00000175 48B848E17A140E7CF5-         mov rax, 0x40F57C0E147AE148                ;if yes return $88000.80
   169 0000017E 40                 
   170 0000017F 664C0F6EF8                  movq xmm15, rax                            ;store into xmm15
   171 00000184 740F                        je exit                                    ;jump to the end 
   172                                  
   173 00000186 48B814AE47E17AC092-         mov rax, 0x4092C07AE147AE14                ;else return $1200.12
   173 0000018F 40                 
   174 00000190 664C0F6EF8                  movq xmm15, rax
   175                                  ;------------------------------------------------------------------------------- 
   176                                      exit:
   177 00000195 6A00                        push qword 0
   178 00000197 B800000000                  mov rax, 0
   179 0000019C 48BF-                       mov rdi, end_display                 ;print the sum that return main 
   179 0000019E [1701000000000000] 
   180 000001A6 E8(00000000)                call printf
   181 000001AB 58                          pop rax 
   182                                  ;-------------------------------------------------------------------------------
   183 000001AC 58                          pop rax
   184 000001AD F2410F10C7                  movsd xmm0, xmm15                        ;back to main.c 
   185                                  ;-------------------------------------------------------------------------------
   186                                  ;Restore original values to integer registers
   187 000001B2 9D                            popf
   188 000001B3 5B                            pop rbx
   189 000001B4 415F                          pop r15
   190 000001B6 415E                          pop r14
   191 000001B8 415D                          pop r13
   192 000001BA 415C                          pop r12
   193 000001BC 415B                          pop r11
   194 000001BE 415A                          pop r10
   195 000001C0 4159                          pop r9
   196 000001C2 4158                          pop r8
   197 000001C4 59                            pop rcx
   198 000001C5 5A                            pop rdx
   199 000001C6 5E                            pop rsi
   200 000001C7 5F                            pop rdi
   201 000001C8 5D                            pop rbp
   202                                  
   203 000001C9 C3                            ret
