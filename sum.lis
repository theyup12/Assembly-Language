     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: create an array and sum  
     3                                  ;This program is use to make an array and sum by creating the multiple assembly file *
     4                                  ;Programming Language:x86Assembly
     5                                  ; Program Description: This program asks a user to input floating point into array and 
     6                                  ; return the sum of the array.
     7                                  ;********************************************************************************************
     8                                  ; Copyright (C) 2020 Bilal El-haghassan                                                     *
     9                                  ; This program is free software: you can redistribute it and/or modify it under the terms   *
    10                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. *
    11                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    12                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
    13                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    14                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.  
    15                                  ;                          
    16                                  ;****************************************************************************************************************************
    17                                  
    18                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    19                                  ;
    20                                  ;Author information
    21                                  ;  Author name: Andy Cao
    22                                  ;  Author email: dongyicao123@csu.fullerton.edu
    23                                  ;
    24                                  ;Program information
    25                                  ;  Program name: sum of array
    26                                  ;  Programming languages: One modules in C, one module in C++ and three module in X86
    27                                  ;  Date program began: 2021-Mar-10
    28                                  ;  Date of last update: 2021-Mar-20
    29                                  ;  Date of reorganization of comments: 2020-Mar-20
    30                                  ;  Files in this program: display.cpp, fill.asm, main.c, control.asm, sum.asm
    31                                  ;  Status: Finished.  The program was tested extensively with no errors in Xubuntu19.04.
    32                                  ;
    33                                  ;This file
    34                                  ;   File name: sum.asm
    35                                  ;   Language: X86 with Intel syntax.
    36                                  ;   Max page width: 106 columns
    37                                  ;   Assemble: nasm -f elf64 -l sum.lis -o sum.o sum.asm
    38                                  ;===== Begin code area =======================================================================================================
    39                                  extern printf 
    40                                  extern scanf
    41                                  global sum
    42                                  segment .data
    43                                      
    44                                  segment .bss
    45                                  
    46                                  segment .text
    47                                  
    48                                  sum:
    49                                  ;Insurance for any caller of this assembly module
    50 00000000 55                            push rbp
    51 00000001 4889E5                        mov rbp, rsp
    52 00000004 57                            push rdi
    53 00000005 56                            push rsi
    54 00000006 52                            push rdx
    55 00000007 51                            push rcx
    56 00000008 4150                          push r8
    57 0000000A 4151                          push r9
    58 0000000C 4152                          push r10
    59 0000000E 4153                          push r11
    60 00000010 4154                          push r12
    61 00000012 4155                          push r13
    62 00000014 4156                          push r14
    63 00000016 4157                          push r15
    64 00000018 53                            push rbx
    65 00000019 9C                            pushf
    66                                  ;-------------------------------------------------------------------------------
    67 0000001A 6A00                        push qword 0	;pushes
    68                                  ;-------------------------------------------------------------------------------
    69 0000001C 4989FE                      mov r14, rdi
    70 0000001F 4989F5                      mov r13, rsi
    71 00000022 41BC00000000                mov r12, 0
    72 00000028 41BB00000000                mov r11, 0
    73 0000002E F24D0F2AF3                  cvtsi2sd xmm14, r11
    74                                  
    75                                  ;-------------------------------------------------------------------------------
    76                                      begin_loop:
    77                                      
    78 00000033 4D39EC                      cmp r12, r13                            ;compare with the max size of array 
    79 00000036 7D1B                        jge end_loop                            ;if reach then quit loop
    80                                  
    81 00000038 41BA01000000                mov r10, 1 
    82 0000003E F24D0F2AEA                  cvtsi2sd xmm13, r10
    83 00000043 F2470F5E2CE6                divsd xmm13, [r14 + 8 * r12]            ; 1/ a + 1/b + 1/c
    84 00000049 F2450F58F5                  addsd xmm14, xmm13                      ; add 
    85 0000004E 49FFC4                      inc r12                                 ;increments counter by 1 
    86                                  
    87 00000051 EBE0                        jmp begin_loop                          ;loop again 
    88                                  ;-------------------------------------------------------------------------------    
    89                                      end_loop:   
    90 00000053 F24D0F2AE4                  cvtsi2sd xmm12, r12
    91 00000058 F2450F5EE6                  divsd xmm12, xmm14
    92 0000005D 58                          pop rax
    93 0000005E F2410F10C4                  movsd xmm0, xmm12                       ;return the sum 
    94                                  ;-------------------------------------------------------------------------------
    95                                  ;Restore original values to integer registers
    96 00000063 9D                            popf
    97 00000064 5B                            pop rbx
    98 00000065 415F                          pop r15
    99 00000067 415E                          pop r14
   100 00000069 415D                          pop r13
   101 0000006B 415C                          pop r12
   102 0000006D 415B                          pop r11
   103 0000006F 415A                          pop r10
   104 00000071 4159                          pop r9
   105 00000073 4158                          pop r8
   106 00000075 59                            pop rcx
   107 00000076 5A                            pop rdx
   108 00000077 5E                            pop rsi
   109 00000078 5F                            pop rdi
   110 00000079 5D                            pop rbp
   111                                  
   112 0000007A C3                            ret
