     1                                  ;Andy Cao - 888500782 - May 20, 2021
     2                                  ;****************************************************************************************************************************
     3                                  ;Program name: create an harmonic example 
     4                                  ;Programming Language:x86Assembly
     5                                  ;********************************************************************************************
     6                                  ; Copyright (C) 2020                                                    *
     7                                  ; This program is free software: you can redistribute it and/or modify it under the terms   *
     8                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. *
     9                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    10                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. *
    11                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    12                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.  
    13                                  ;                          
    14                                  ;****************************************************************************************************************************
    15                                  
    16                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    17                                  ;
    18                                  ;Author information
    19                                  ;  Author name: Andy Cao
    20                                  ;  Author email: dongyicao123@csu.fullerton.edu
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: harmonic
    24                                  ;  Programming languages: One modules in C, one module in C++ and three module in X86
    25                                  ;  Date program began: 2021-May-20
    26                                  ;  Date of last update: 2021-May-20
    27                                  ;  Status: Finished.  The program was tested extensively with no errors in Xubuntu19.04.
    28                                  ;
    29                                  ;This file
    30                                  ;   File name: harmonic.asm
    31                                  ;   Language: X86 with Intel syntax.
    32                                  ;   Max page width: 145 columns
    33                                  ;===== Begin code area =======================================================================================================
    34                                  extern printf 
    35                                  extern scanf
    36                                  extern display_array
    37                                  extern input_array
    38                                  extern cal_harmonic
    39                                  arr_size equ 100
    40                                  
    41                                  global harmonic
    42                                  
    43                                  segment .data
    44                                      ; intro_text db "Enter float number separated by white space. Invalid inputs will be omitted", 10
    45                                      ;            db "Enter control+D to terminate", 10, 0
    46 00000000 257300                      input db "%s", 0 
    47 00000003 256C6600                    float_format db "%lf", 0
    48 00000007 546865206861726D6F-         result db "The harmonic mean of these number is %lf", 10, 0
    48 00000010 6E6963206D65616E20-
    48 00000019 6F6620746865736520-
    48 00000022 6E756D626572206973-
    48 0000002B 20256C660A00       
    49 00000031 5468616E6B20796F75-         display_arr db "Thank you. You entered:",10,0
    49 0000003A 2E20596F7520656E74-
    49 00000043 657265643A0A00     
    50 0000004A 546865206861726D6F-         end_display db "The harmonic mean will be returned to the driver.",10, 0
    50 00000053 6E6963206D65616E20-
    50 0000005C 77696C6C2062652072-
    50 00000065 657475726E65642074-
    50 0000006E 6F2074686520647269-
    50 00000077 7665722E0A00       
    51                                  segment .bss
    52 00000000 <res 00000320>                  int_array resq 100
    53                                  segment .text
    54                                  
    55                                  harmonic:
    56                                  ;Insurance for any caller of this assembly module
    57 00000000 55                            push rbp
    58 00000001 4889E5                        mov rbp, rsp
    59 00000004 57                            push rdi
    60 00000005 56                            push rsi
    61 00000006 52                            push rdx
    62 00000007 51                            push rcx
    63 00000008 4150                          push r8
    64 0000000A 4151                          push r9
    65 0000000C 4152                          push r10
    66 0000000E 4153                          push r11
    67 00000010 4154                          push r12
    68 00000012 4155                          push r13
    69 00000014 4156                          push r14
    70 00000016 4157                          push r15
    71 00000018 53                            push rbx
    72 00000019 9C                            pushf
    73                                  ;-------------------------------------------------------------------------------
    74                                      
    75 0000001A 6AFF                        push qword -1                         ;create even number of pushes
    76 0000001C 41BE00000000                mov r14, 0	                     
    77                                  ;-------------------------------------------------------------------------------
    78 00000022 48BF-                       mov qword rdi, int_array               ;ask user for input
    78 00000024 [0000000000000000] 
    79 0000002C BE64000000                  mov qword rsi, arr_size
    80 00000031 B800000000                  mov qword rax, 0
    81 00000036 E8(00000000)                call input_array
    82 0000003B 4989C6                      mov r14, rax
    83                                  ;-------------------------------------------------------------------------------
    84 0000003E B800000000                  mov qword rax, 0
    85 00000043 48BF-                       mov qword rdi, display_arr             ;display user's input
    85 00000045 [3100000000000000] 
    86 0000004D B800000000                  mov qword rax, 0
    87 00000052 E8(00000000)                call printf
    88                                  
    89 00000057 6A00                        push qword 0
    90 00000059 B800000000                  mov rax, 0
    91 0000005E 48BF-                       mov qword rdi, int_array
    91 00000060 [0000000000000000] 
    92 00000068 4C89F6                      mov qword rsi, r14
    93 0000006B E8(00000000)                call display_array
    94 00000070 58                          pop rax 
    95                                  ;------------------------------------------------------------------------------- 
    96                                      
    97 00000071 6A00                        push qword 0
    98 00000073 48BF-                       mov qword rdi , int_array               ;calculate the harmonic
    98 00000075 [0000000000000000] 
    99 0000007D 4C89F6                      mov qword rsi , r14
   100 00000080 B800000000                  mov qword rax, 0
   101 00000085 E8(00000000)                call cal_harmonic 
   102 0000008A F2440F10E8                  movsd xmm13, xmm0
   103 0000008F 58                          pop rax 
   104                                  
   105                                  ; ;------------------------------------------------------------------------------- 
   106                                      
   107 00000090 6A00                        push qword 0
   108 00000092 B801000000                  mov qword rax, 1
   109 00000097 48BF-                       mov qword rdi, result                   ;print result
   109 00000099 [0700000000000000] 
   110 000000A1 F2410F10C5                  movsd xmm0, xmm13
   111 000000A6 E8(00000000)                call printf
   112 000000AB 58                          pop rax 
   113                                  
   114 000000AC B800000000                  mov qword rax, 0
   115 000000B1 48BF-                       mov qword rdi, end_display
   115 000000B3 [4A00000000000000] 
   116 000000BB E8(00000000)                call printf
   117                                  ;-------------------------------------------------------------------------------
   118 000000C0 58                          pop rax
   119 000000C1 F2410F10C5                  movsd xmm0, xmm13                        ;back to main.c 
   120                                  ;-------------------------------------------------------------------------------
   121                                  ;Restore original values to integer registers
   122 000000C6 9D                            popf
   123 000000C7 5B                            pop rbx
   124 000000C8 415F                          pop r15
   125 000000CA 415E                          pop r14
   126 000000CC 415D                          pop r13
   127 000000CE 415C                          pop r12
   128 000000D0 415B                          pop r11
   129 000000D2 415A                          pop r10
   130 000000D4 4159                          pop r9
   131 000000D6 4158                          pop r8
   132 000000D8 59                            pop rcx
   133 000000D9 5A                            pop rdx
   134 000000DA 5E                            pop rsi
   135 000000DB 5F                            pop rdi
   136 000000DC 5D                            pop rbp
   137                                  
   138 000000DD C3                            ret
